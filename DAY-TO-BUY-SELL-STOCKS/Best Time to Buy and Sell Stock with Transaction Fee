You are given an array prices where prices[i] is the price of a given stock on the ith day, and an integer fee representing a transaction fee.
Find the maximum profit you can achieve. You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.
Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).
 
Example 1:
Input: prices = [1,3,2,8,4,9], fee = 2
Output: 8
Explanation: The maximum profit can be achieved by:
- Buying at prices[0] = 1
- Selling at prices[3] = 8
- Buying at prices[4] = 4
- Selling at prices[5] = 9
The total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.
Example 2:
Input: prices = [1,3,7,5,10,3], fee = 3
Output: 6
 
Constraints:
	• 1 <= prices.length <= 5 * 104
	• 1 <= prices[i] < 5 * 104
	• 0 <= fee < 5 * 104

From <https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/> 


// no transaction so no transaction count
// we just have to delete fee after sell

class Solution {
public:
    int dp[50001][2];
    int bestTime(vector<int>&prices, int currentDay, bool canBuy,int fee){
        if(currentDay >= prices.size()){
            return 0;
        }
        
        if(dp[currentDay][canBuy]!=-1){
            return dp[currentDay][canBuy];
        }
        int idle = bestTime(prices,currentDay+1,canBuy,fee);
        int buy=0,sell=0;
        if(canBuy){
             buy = -prices[currentDay] + bestTime(prices,currentDay+1, 0,fee);
            dp[currentDay][canBuy] =  max(buy,idle);
            return  dp[currentDay][canBuy];
        }
        else{
            sell = prices[currentDay] + bestTime(prices,currentDay+1,1,fee) -fee;
            dp[currentDay][canBuy] =  max(sell,idle);
            return  dp[currentDay][canBuy];
        }
    }
    int maxProfit(vector<int>& prices, int fee) {
        memset(dp,-1,sizeof(dp));
        return bestTime(prices,0,1,fee);
    }
};
