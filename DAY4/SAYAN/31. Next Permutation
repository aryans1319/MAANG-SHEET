Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.
If such an arrangement is impossible, it must rearrange it to the lowest possible order (i.e., sorted in ascending order).
The replacement must be in place and use only constant extra memory.
 
Example 1:
Input: nums = [1,2,3]
Output: [1,3,2]
Example 2:
Input: nums = [3,2,1]
Output: [1,2,3]
Example 3:
Input: nums = [1,1,5]
Output: [1,5,1]
 
Constraints:
	• 1 <= nums.length <= 100
	• 0 <= nums[i] <= 100

From <https://leetcode.com/problems/next-permutation/> 

Brute force  solution 

     //         c++ stl solution :)

        // next_permutation(nums.begin(),nums.end());


TT.C ==> O(n)   S.C==> O(1)
Most efficient solution :) 
 way to approach the solution 

 1.  we have to iterate the whole vector from back , and we have to find the break point
                                                                                                                          (vec[i] < vec[i + 1])
	2. Now we got the break point and value ; 
	3.  Now we have to iterate the whole array from backward  and find the exact point when array value is greater than our value :)
	4. Now swap the two value 
	5.  then reverse after the break point till the end .
      

                               Nums->          1 3 5 4 2
                                                       1 3 5 4 2 
                                                       1 3 5 4  2
                                                       swap (3,4)
                                       ans->      1 4 5 3 2 

  





class Solution
{
public:
    void nextPermutation(vector<int> &vec)
    {
        int i;
        for (i = vec.size() - 2; i >= 0; i--)
        {
            if (vec[i] < vec[i + 1])
            {
                break;

            }
        }
        cout << i;
        if (i < 0)
        {
            reverse(vec.begin(), vec.end());
        }

        else
        {
            for (int j = vec.size() - 1; j > 0; j--)
            {

                if (vec[j] > vec[i])
                {
                    swap(vec[j], vec[i]);
                    break;
                }
            }
            reverse(vec.begin() + i + 1, vec.end());
        }
    }
};
