#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define int long long
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
bool isPrime(int n)
{
   // Corner case
  if (n <= 1)
  return false;
 // Check from 2 to n-1
for (int i = 2; i < n; i++)
if (n % i == 0)
 return false;
return true;
}
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
#define fast ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
int search(string pat, string txt) {
	    int k=pat.length();
	    unordered_map<char,int>mp;
	    for(int i=0;i<k;i++)
	    {
	        mp[pat[i]]++;
	    }
	    int i=0,j=0,ans=0;
	    int n=txt.length();
	    int cnt=mp.size();
	    while(j<n)
	    {
	        if(mp.find(txt[j])!=mp.end())
	        {
	            mp[txt[j]]--;
	            if(mp[txt[j]]==0)
	            {
	                cnt--;
	            }
	        }
	        if(j-i+1<k)
	        {
	            j++;
	        }
	        else if(j-i+1==k)
	        {
	            if(cnt==0)
	            {
	                ans++;
	            }
	            if(mp.find(txt[i])!=mp.end())
	            {
	                mp[txt[i]]++;
	                if(mp[txt[i]]==1)
	                {
	                    cnt++;
	                }
	            }
	            i++;
	            j++;
	        }
	    }
	    return ans;
	}

int32_t main(){
fast


// Fuck Ratings, I'm in Love with Experience.
// Once a Charas, Always a CHARAS.


int t=1;
while(t--){
    string pat ; 
     string text ; 
      cin >> pat >> text ; 
    cout <<   search(pat,text);
       
}
return 0;
}





// Notes from aryan :)
Given an array of integers Arr of size N and a number K. Return the maximum sum of a subarray of size K. 

  

Example 1: 

Input:N = 4, K = 2 
Arr = [100, 200, 300, 400]Output:700Explanation:Arr3  + Arr4 =700,which is maximum. 

  

Example 2: 

Input:N = 4, K = 4Arr = [100, 200, 300, 400]Output:1000Explanation:Arr1 + Arr2 + Arr3   
+ Arr4 =1000,which is maximum. 

 

From <https://practice.geeksforgeeks.org/problems/max-sum-subarray-of-size-k5313/1#submission>  

 

CODE 

 

int maximumSumSubarray(int K, vector<int> &Arr , int N){ 

        // code here 

        int sum = 0; 

        int mx = INT_MIN; 

        int i=0,j=0; 

        while(j< Arr.size()){ 

            sum+=Arr[j]; 

            if(j-i+1<K){ 

                j++; 

            } 

            else if(j-i+1==K){ 

                mx= max(mx,sum); 

                sum-=Arr[i]; 

                i++; 

                j++; 

            } 

        } 

        return mx; 

    } 

 
