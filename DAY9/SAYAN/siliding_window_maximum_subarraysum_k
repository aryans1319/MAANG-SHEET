#include<bits/stdc++.h>
using namespace std;
int main()
{int t;
    cin>>t;
    while(t--)
    {//max of subarray of size k 
        int n,k;
        cin>>n>>k;//size of array and subarray
        int a[n];
        vector<int>v;
        for(int i=0;i<n;i++)
        {
           cin>>a[i]; 
        }
        int i=0,j=0,sum=0;
        while(j<n)
        {
            if(j-i+1<k)
           {sum+=a[j];
               j++;
           } 
           else if(j-i+1 ==k)
           {sum+=a[j];
           v.push_back(sum);
           sum-=a[i];
           i++;
           j++;
           }
            }
        cout << *max_element(v.begin(), v.end()) << endl; //for printing max of all k subarray of size k 
        
    }
}



// Notes 
Given an array of integers Arr of size N and a number K. Return the maximum sum of a subarray of size K. 

  

Example 1: 

Input:N = 4, K = 2 
Arr = [100, 200, 300, 400]Output:700Explanation:Arr3  + Arr4 =700,which is maximum. 

  

Example 2: 

Input:N = 4, K = 4Arr = [100, 200, 300, 400]Output:1000Explanation:Arr1 + Arr2 + Arr3   
+ Arr4 =1000,which is maximum. 

 

From <https://practice.geeksforgeeks.org/problems/max-sum-subarray-of-size-k5313/1#submission>  

 

CODE 

 

int maximumSumSubarray(int K, vector<int> &Arr , int N){ 

        // code here 

        int sum = 0; 

        int mx = INT_MIN; 

        int i=0,j=0; 

        while(j< Arr.size()){ 

            sum+=Arr[j]; 

            if(j-i+1<K){ 

                j++; 

            } 

            else if(j-i+1==K){ 

                mx= max(mx,sum); 

                sum-=Arr[i]; 

                i++; 

                j++; 

            } 

        } 

        return mx; 

    } 

 
