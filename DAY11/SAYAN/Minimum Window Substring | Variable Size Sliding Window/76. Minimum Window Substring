Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string "".
The testcases will be generated such that the answer is unique.
A substring is a contiguous sequence of characters within the string.
 
Example 1:
Input: s = "ADOBECODEBANC", t = "ABC"
Output: "BANC"
Explanation: The minimum window substring "BANC" includes 'A', 'B', and 'C' from string t.
Example 2:
Input: s = "a", t = "a"
Output: "a"
Explanation: The entire string s is the minimum window.
Example 3:
Input: s = "a", t = "aa"
Output: ""
Explanation: Both 'a's from t must be included in the window.
Since the largest window of s only has one 'a', return empty string.
 
Constraints:
	• m == s.length
	• n == t.length
	• 1 <= m, n <= 105
	• s and t consist of uppercase and lowercase English letters.
 

From <https://leetcode.com/problems/minimum-window-substring/> 

			
class Solution {
public:
    string minWindow(string s, string t) {
           unordered_map<char,int>mp; 
                            // making an unorder map to store the values of  t string //

         for (int i = 0; i < t.size(); i++)
         {
            mp[t[i]]++;
         }
                    // store all t digits count 
          int count = mp.size();
           string ans;

          int mini = INT_MAX;   //  for selecting the minimum size 

           int i =0;
            int j =0;

             while (j<s.size())
             {
               
               if(mp.find(s[j])!= mp.end())
               {
                  mp[s[j]]--;      // decrease  the count if we found elem 
                  if(mp[s[j]]==0) // if any character count is 0 then count --
                  {
                     count--;
                  }

               }

                while ( count ==0 )  // now we got one possible ans now we have to find if we can cut anything from this posssible ans 
                {
                      if(mini>j-i+1)
                      {
                          mini= min(mini,j-i+1);
                           ans=s.substr(i,j-i+1);
                      
                      }
                      if(mp.find(s[i])!=mp.end())
                      {
                          mp[s[i]]++;
                          if(mp[s[i]]==1)
                          {
   count++;
                          }
                        
                      }
                      i++;
                     



                }
                j++;
                





             }
              return ans;
             

         

    }
};
