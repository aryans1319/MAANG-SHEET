This is a simple brute force solution  , if the array doesn't contain any 0 zero's in the array
we can go with this 



class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
      vector<int>k;
          for(int i =0; i<nums.size();i++)
          {
              int mul=1;
               for(auto elem : nums)
               {
                      if(nums[i]!=elem)
                      {
                          mul=mul*elem;
                      }
               }
              k.push_back(mul);
           
          }
        
         return k;
        
        
        
        
    }
};



 // best solution so far :) 100% bro :)
 class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        
       vector<int> left,ans;
        int product=1;
        int n=nums.size();
        
        vector<int> right(n,0);
        for(int i=0;i<n;i++)
        {
            left.push_back(product);
            product *= nums[i];
        }
        
        product =1;
        for(int i=n-1;i>=0;i--)
        {
            right[i] = product;
            product *= nums[i];
        }
        
//          for (auto elem :right)
//          {
//              cout <<elem<<" ";
//          }
//         cout <<endl;
            
//          for (auto elem :left)
//          {
//              cout <<elem<<" ";
//          }
//         cout <<endl;
        
        for(int i=0;i<n;i++)
        {
            ans.push_back(left[i] * right[i]);
        }
        
        return ans;
            
        
    }
};
