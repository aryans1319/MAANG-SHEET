//most simple brute force solution
//TC- O(n)
//Sc-O(n)

class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        vector<int>l;
         for(auto elem : nums)
         {
             if(elem!=0)
             {
                l.push_back(elem); 
             }
         }
        int i=0;
         for(auto elem:l)
         {
          nums[i]=elem;
             i++;
         }
        
        for(int j=i;j<nums.size();j++)
        {
            nums[j]=0;
            
        }
         
        
        
    }
};




OPtimal :-

// T.C ==> O(n) S.C ==> O(1)
class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        int size = nums.size();
        
        // take a pointer at the start 
        int a=0;
        
        for(int i=0; i<size; i++) {
            // if the nums[i]!=0, swap with the start element
            if(nums[i]!=0) {
                swap(nums[i], nums[a]);
                // increment the start poiner after swapping every time
                a++;
            }
        }
    }
};
             

// another optimal sultion with Dry run using two-pointer :)


class Solution {
public:
    void moveZeroes(vector<int>& nums) {
     int l = 0, r = 0, n = nums.size();
     while(r < n) {
       if (nums[r]!=0) {
         swap(nums[l], nums[r]);
         l++;
       }
       r++;
     }
    }
};

// Dry run with full explanation 
//  r
//  l
//  0 1 0 3  12 

//  if 0 then no swap 
//  only r++
    
//     l r
//     0 1 0 3 12 
    
//      now if non zero elem then swap 
//      l++,r++
     
//       l r  
//     1 0 0 3 12
         
//       if 0 then no swap 
//       only r++
             
//       l   r  
//     1 0 0 3 12 
             
//      now if non zero elem then swap 
//      l++, r++
         
//         l    r
//     1 3 0 0 12 
         
                      
//      now if non zero elem then swap 
//      l++, r++
//          1 3 12 0 0 
         
// now r >n  so condition break ; 



